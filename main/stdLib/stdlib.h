/*********************************************
 * stdlib.h / stdlib.c
 * -----------------------------------------
 * Велосипед с треугльными колёсами
 * Привык к динамическому распределению памяти,
 * а за неимением стандартной библиотеки для МК
 * (+ просто хотелось с нуля всё сделать, тем более,
 * что и так даже без CMSIS пишу) пришлось написать 
 * этого монстра.
 * 
 * програмистам советую не смотреть реализацию - потекут глаза.
 * 
 * ------------------------------------------
 * 
 * 1) создаётся массив структур для хранения
 * адреса и размера выделенной памяти.
 * Так как я не сумел изъебнуться и рекурсивно
 * решить задачу, количество участков распределения
 * памяти задаётся статически через макрос:
 * 
 * _HEAP_MAX_N 
 * 
 * в конце я его ундефайню, чтобы больше нигде не выстрелил
 * ------------------------------------------
 * 2) u_malloc(__ЧИСЛО_БАЙТ__);
 * 
 *  эта функция разбита внутри на несколько частных случаев,
 * но по сути все они ищут свободный участок памяти внутри массива
 * __heap[], и записывают в массив структуры(1) 
 * новый адрес и память для нового дин. массива  
 * ------------------------------------------
 * 3) u_free() - ищет в структуре(1) адрес
 * и если он есть удаляет его и сдвигает на его
 * место следующие за ним элементы (в структуре а не в куче)
**********************************************/


#ifndef STDLIB_H
#define STDLIB_H

typedef unsigned int uint32_t;
typedef unsigned int size_t;

void* u_malloc(int _size);
//void* calloc(int _size);
void u_free(void* pointer);
void* u_realloc(void* ptr, int size);

/* Set N bytes of S to C.  */
void* u_memset (char *__s, int __c, uint32_t __n);


#endif // !STDLIB_H
